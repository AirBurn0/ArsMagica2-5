buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            name = "gt" // some libs
            url = "https://gregtech.overminddl1.com/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url = "https://jitpack.io/"
        }
    }
    dependencies {
        classpath 'com.github.CDAGaming:ForgeGradle:1c670759c5'
    }
}

apply plugin: 'forge'

file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

repositories {
    maven {
        name = "forge"
        url = "https://files.minecraftforge.net/maven/"
        metadataSources({
            artifact()
        })
    }
}

version = "${config.minecraft.version}-${config.mod.version}"
group = "am2" 
archivesBaseName = "AM2"

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc).tap {
            configureEach {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }
}


configurations {
    embedded
    implementation.extendsFrom embedded
    all*.exclude group: "codechicken"
}

dependencies {
   
}

minecraft {
    version = "${config.minecraft.version}-${config.forge.version}"
    runDir = "run"

    replaceIn "am/AMCore.java"
    replace "@VERSION@", "${config.mod.version}"
}

sourceSets {
    main {
        output.resourcesDir = 'build/classes/java/main'
    }
}

apply plugin: 'idea'
idea {
    module {
        outputDir = file('build/classes/java/main')
    }
}

processResources {
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
    // Move access transformer to META-INF
    //rename '(.+_at.cfg)', 'META-INF/$1'
}

reobf {
}

def commonManifest = {
    //attributes FMLAT: "mod_at.cfg"
}

//For Building

jar {
    exclude 'cofh/**'
    manifest commonManifest
}

def libDir = './build/libs'

tasks.register('deobfJar', Jar) {
    description = 'Creates a jar file containing the non-obfuscated class files'
    classifier = 'deobf'
    destinationDir = file(libDir)
    from sourceSets.main.output.classesDirs
    exclude 'cofh/**'
    manifest commonManifest
}

tasks.register('apiZip', Zip) {
    description = 'Creates a zip file containing the API source files only'
    classifier = 'api'
    destinationDir = file(libDir)
    from sourceSets.main.allSource
    include 'am2/api/**'
}

tasks.register('makeJars') {
    description = 'Creates the mod files'
}

makeJars.dependsOn clean, build, deobfJar //,apiZip
build.shouldRunAfter clean
deobfJar.shouldRunAfter build
//apiZip.shouldRunAfter deobfJar

